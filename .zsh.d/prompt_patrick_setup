# adam2 prompt theme

prompt_adam2_help () {
  cat <<'EOF'
This prompt is color-scheme-able.  You can invoke it thus:

  prompt adam2 [ 8bit ] [<color1> [<color2> [<color3>] [<color4>]]

where the colors are for the hyphens, current directory, user@host,
and user input bits respectively.  The default colors are cyan, green,
cyan, and white.  This theme works best with a dark background.

If you have the `nexus' or `vga' console fonts or similar, you
can specify the `8bit' option to use 8-bit replacements for the
7-bit characters.

And you probably thought adam1 was overkill ...
EOF
}

prompt_adam2_setup () {
  # Some can't be local
  local prompt_gfx_tlc prompt_gfx_mlc prompt_gfx_blc

  if [[ $1 == '8bit' ]]; then
    shift
    prompt_gfx_tlc=$'\xda'
    prompt_gfx_mlc=$'\xc3'
    prompt_gfx_blc=$'\xc0'
    prompt_gfx_hyphen=$'\xc4'
  else
    prompt_gfx_tlc='.'
    prompt_gfx_mlc='|'
    prompt_gfx_blc='\`'
    prompt_gfx_hyphen='-'
  fi

  # Colour scheme
  prompt_adam2_color1=${1:-'cyan'}    # hyphens
  prompt_adam2_color2=${2:-'green'}   # current directory
  prompt_adam2_color3=${3:-'cyan'}    # user@host
  prompt_adam2_color4=${4:-'white'}   # user input
  prompt_adam2_color5=${5:-'yellow'}  # git info color

  local prompt_gfx_bbox 
  prompt_gfx_tbox="%{$fg_bold[$prompt_adam2_color1]%}${prompt_gfx_tlc}%{$fg_no_bold[$prompt_adam2_color1]%}${prompt_gfx_hyphen}"
  prompt_gfx_bbox="%{$fg_bold[$prompt_adam2_color1]%}${prompt_gfx_blc}${prompt_gfx_hyphen}%{$fg_no_bold[$prompt_adam2_color1]%}"

  # This is a cute hack.  Well I like it, anyway.
  prompt_gfx_bbox_to_mbox=$'%{\e[A\r'"$fg_bold[$prompt_adam2_color1]${prompt_gfx_mlc}$fg_no_bold[$prompt_adam2_color1]${prompt_gfx_hyphen}"$'\e[B%}'

  prompt_l_paren="%{$fg_bold[grey]%}("
  prompt_r_paren="%{$fg_bold[grey]%})"

  prompt_user_host="%{$fg_no_bold[$prompt_adam2_color3]%}%n%{$fg_bold[$prompt_adam2_color3]%}@%{$fg_no_bold[$prompt_adam2_color3]%}%m"
  prompt_data="%{$fg_no_bold[$prompt_adam2_color3]%}% \`date +%F.%H-%M-%S | tr -d '\n'\`%{$fg_bold[$prompt_adam2_color3]%}"

  prompt_line_1a="$git$prompt_gfx_tbox$prompt_l_paren%{$fg_bold[$prompt_adam2_color2]%}%~$prompt_r_paren%{$fg_no_bold[$prompt_adam2_color1]%}"
  prompt_line_1b="$prompt_l_paren$prompt_data$prompt_r_paren$prompt_l_paren$prompt_user_host$prompt_r_paren%{$fg_no_bold[$prompt_adam2_color1]%}${prompt_gfx_hyphen}"
#  prompt_line_1b="$prompt_l_paren$prompt_user_host$prompt_r_paren%{$fg_no_bold[$prompt_adam2_color1]%}${prompt_gfx_hyphen}"
    

  prompt_line_2="$prompt_gfx_bbox${prompt_gfx_hyphen}%{$fg_bold[white]%}"

  prompt_char="%(!.#.>)"

  precmd () { prompt_adam2_precmd; setopt promptsubst }
  preexec () { myLocalHistory $1; prompt_adam2_preexec }
}

prompt_adam2_precmd () {
  setopt noxtrace localoptions extendedglob
  local prompt_line_1

  prompt_adam2_choose_prompt

  PS1="$prompt_line_1$prompt_newline$prompt_line_2%{$fg_bold[white]%}$prompt_char %{$fg_bold[$prompt_adam2_color4]%}"
  PS2="$prompt_line_2%{$prompt_gfx_bbox_to_mbox$fg_bold[white]%}%_> %{$fg_bold[$prompt_adam2_color4]%}"
  PS3="$prompt_line_2%{$prompt_gfx_bbox_to_mbox$fg_bold[white]%}?# %{$fg_bold[$prompt_adam2_color4]%}"
}

# retrieve git status information 	taken from 
# http://ciaranm.wordpress.com/2008/07/16/git-and-subversion-information-in-the-bash-prompt/
_get_git_info() {
	local s=
	local d=$(git rev-parse --git-dir 2>/dev/null ) b= r= a=
	if [[ -n "${d}" ]] ; then
		if [[ -d "${d}/../.dotest" ]] ; then
			if [[ -f "${d}/../.dotest/rebase" ]] ; then
				r="rebase"
			elif [[ -f "${d}/../.dotest/applying" ]] ; then
				r="am"
			else
				r="???"
			fi
			b=$(git symbolic-ref HEAD 2>/dev/null )
		elif [[ -f "${d}/.dotest-merge/interactive" ]] ; then
			r="rebase-i"
			b=$(<${d}/.dotest-merge/head-name)
		elif [[ -d "${d}/../.dotest-merge" ]] ; then
			r="rebase-m"
			b=$(<${d}/.dotest-merge/head-name)
		elif [[ -f "${d}/MERGE_HEAD" ]] ; then
			r="merge"
			b=$(git symbolic-ref HEAD 2>/dev/null )
		elif [[ -f "${d}/BISECT_LOG" ]] ; then
			r="bisect"
			b=$(git symbolic-ref HEAD 2>/dev/null )"???"
		else
			r=""
			b=$(git symbolic-ref HEAD 2>/dev/null )
		fi
			
		if git status 2>/dev/null | grep -q '^# Changed but not updated:' ; then
			a="${a}*"
		fi
			
		if git status 2>/dev/null | grep -q '^# Changes to be committed:' ; then
			a="${a}+"
		fi
			
		if git status 2>/dev/null | grep -q '^# Untracked files:' ; then
			a="${a}?"
		fi
			
		b=${b#refs/heads/}
		b=${b// }
		[[ -n "${r}${b}${a}" ]] && s="${r:+${r}:}${b}${a:+ ${a}}"
	fi
    s="${s}${ACTIVE_COMPILER}"
    s="${s:+${s}}"
    echo -n "$s"
}

prompt_adam2_choose_prompt () {
#  local git_branch
#  git_branch=`git branch 2>/dev/null | grep -e '^*' | sed -E 's/^\* (.+)$/(\1)/'`
#  git_info="$git_branch"

  local color_git
  color_git="%{$fg[$prompt_adam2_color5]%}"
  local color_prompt
  color_prompt="%{$fg_no_bold[$prompt_adam2_color1]%}"

  local _git_info
  _git_info=$(_get_git_info)
  if [[ $_git_info = "" ]]; then
    git_info=""
  else
    git_info=${prompt_l_paren}${color_git}$(_get_git_info)${prompt_r_paren}${color_prompt}
  fi
	
  local prompt_line_1a_width=${#${(S%%)prompt_line_1a//\%\{*\%\}}}
  local prompt_line_1b_width=${#${(S%%)prompt_line_1b//\%\{*\%\}}}
  local git_info_width=${#${(S%%)git_info//\%\{*\%\}}}

  local prompt_padding_size=$(( COLUMNS
                                  - prompt_line_1a_width
								  - git_info_width
                                  - prompt_line_1b_width ))

  # Try to fit in long path and user@host.
  if (( prompt_padding_size > 0 )); then
    local prompt_padding
    eval "prompt_padding=\${(l:${prompt_padding_size}::${prompt_gfx_hyphen}:)_empty_zz}"
	prompt_line_1="$prompt_line_1a$git_info$prompt_padding$prompt_line_1b"
	# prompt_line_1="$prompt_line_1a$prompt_padding$prompt_line_1b"
    return
  fi

  prompt_padding_size=$(( COLUMNS - prompt_line_1a_width ))

  # Didn't fit; try to fit in just long path.
  if (( prompt_padding_size > 0 )); then
    local prompt_padding
    eval "prompt_padding=\${(l:${prompt_padding_size}::${prompt_gfx_hyphen}:)_empty_zz}"
    prompt_line_1="$prompt_line_1a$prompt_padding"
    return
  fi

  # Still didn't fit; truncate 
  local prompt_pwd_size=$(( COLUMNS - 5 ))
  prompt_line_1="$prompt_gfx_tbox$prompt_l_paren%{$fg_bold[$prompt_adam2_color2]%}%$prompt_pwd_size<...<%~%<<$prompt_r_paren%{$fg_no_bold[$prompt_adam2_color1]$prompt_gfx_hyphen%}"
}

prompt_adam2_preexec () {
  print -n "$reset_color"
}


# If I am using vi keys, I want to know what mode I'm currently using.
# zle-keymap-select is executed every time KEYMAP changes.
# From http://zshwiki.org/home/examples/zlewidgets
#Not working...
# function zle-keymap-select {
#   if [ $KEYMAP == vicmd ]; then
#     #echo COMMAND
#    #prompt adam2 yellow
#    prompt_adam2_color1=${1:-'red'} 
#   else [ $KEYMAP == viins ];
#     #echo INSERT
#     #prompt adam2 cyan
#     prompt_adam2_color1=${1:-'cyan'}
#     echo $KEYMAP
#   fi
#     #VIMODE="${${KEYMAP/vicmd/ M:command}/(main|viins)/}"
#   #zle reset-prompt
#   print -n "$reset_color"
# 
# }
# not working yet, todo....
#zle -N zle-keymap-select

prompt_adam2_setup "$@"
